// Sample Line Incremental Bresenham Algorithm#include<windows.h>#include<iostream>#include<math.h>#include <stdio.h>#include<GL/gl.h>#include <GL/glut.h>using namespace std;int X1, Y1, X2, Y2;void Bresenham(void){    int dx = (X2-X1);    int dy = (Y2-Y1);    int dstart = (2*dy)-dx;    int dNE = 2*(dy-dx);    int dE = 2*dy;    int d = dstart;    int x = X1;    int y = Y1;    glClear(GL_COLOR_BUFFER_BIT);    glBegin(GL_POINTS);    glVertex2d(x,y);    int dIncr = 0;    for(int i=0; i<dx; i++){        if(d>0){            x+=1;            y+=1;            d+=dNE;        }else{            x+=1;            d+=dE;        }        glVertex2d(x,y);    }    glEnd();    glFlush();}void myInit(){    glClearColor(1.0, 1.0, 1.0, 0.0);    glColor3f(0.0f, 0.0f, 0.0f);    glPointSize(4.0);    glMatrixMode(GL_PROJECTION);    glLoadIdentity();    gluOrtho2D(-20.0, 20.0,-20.0, 20.0);}int main(int argc, char** argv){    glutInit(&argc, argv);    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);    glutInitWindowSize (640, 640);    glutInitWindowPosition (100, 150);    glutCreateWindow ("Incremental Line Bresenham");    cout<<"Enter an initial points: ";    cin>>X1;    cin>>Y1;    cout<<"Enter the final points: ";    cin>>X2;    cin>>Y2;    glutDisplayFunc(Bresenham);    myInit();    glutMainLoop();}